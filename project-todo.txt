Deliverable 2: Middle-End
Objective
The objective of this deliverable is to transform the Abstract Syntax Tree (AST) into an
intermediate representation (IR) and apply optimizations to improve execution efficiency. This
phase ensures that redundant operations are eliminated, and the generated code is as efficient as
possible.
Tasks
Intermediate Representation (IR)
 Convert AST to three-address code or LLVM IR.
 Handle temporary variables for intermediate calculations.
Example:
x = a + b * 3;
→ t1 = b * 3
→ t2 = a + t1
→ x = t2
Optimizations
 Implement constant folding (e.g., 3 + 5 → 8).
 Dead code elimination (remove unused variables/statements).
 Strength reduction (optimize costly operations, e.g., replacing x * 2 with x << 1).
 Loop-invariant code motion (optional stretch goal).
 Common subexpression elimination to reduce redundant calculations.
Tools
 LLVM
Submission
 Code for IR generation and optimizations.
 Test programs showing IR before/after optimization.
 Test cases (valid/invalid programs) with outputs.
 Report comparing optimized vs. unoptimized IR.